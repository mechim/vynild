services:
  user_db:
    container_name: user_db
    image: postgres:13
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: user_service_user
      POSTGRES_PASSWORD: user_service_password
    volumes:
      - postgres_data_server_user:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pad-network

  review_db:
    container_name: review_db
    image: postgres:13
    environment:
      POSTGRES_DB: review_service_db
      POSTGRES_USER: review_service_user
      POSTGRES_PASSWORD: review_service_password
    volumes:
      - postgres_data_server_review:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - pad-network

  user-service-1:
    container_name: user-service-1
    build: 
      context: ./user_service
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./user_service:/app
    ports:
      - "8000:8000"
    depends_on:
      - user_db
      - api-gateway
      - service-discovery
    environment:
      - PORT=8000
      - DATABASE_URL=postgres://user_service_user:user_service_password@user_db:5432/user_service_db
      - SERVICE_DISCOVERY_HOST=service-discovery:50051 # The gRPC host and port for the service discovery
      - SERVICE_TYPE=user
      - AWAKE_INSTANCE=0
    networks:
      - pad-network
      
  user-service-2:
    container_name: user-service-2
    build: 
      context: ./user_service
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./user_service:/app
    ports:
      - "8001:8000"
    depends_on:
      - user_db
      - api-gateway
      - service-discovery
    environment:
      - PORT=8001
      - DATABASE_URL=postgres://user_service_user:user_service_password@user_db:5432/user_service_db
      - SERVICE_DISCOVERY_HOST=service-discovery:50051 # The gRPC host and port for the service discovery
      - SERVICE_TYPE=user
      - AWAKE_INSTANCE=0
    networks:
      - pad-network

  user-service-3:
    container_name: user-service-3
    build: 
      context: ./user_service
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./user_service:/app
    ports:
      - "8002:8000"
    depends_on:
      - user_db
      - api-gateway
      - service-discovery
    environment:
      - PORT=8002
      - DATABASE_URL=postgres://user_service_user:user_service_password@user_db:5432/user_service_db
      - SERVICE_DISCOVERY_HOST=service-discovery:50051 # The gRPC host and port for the service discovery
      - SERVICE_TYPE=user
      - AWAKE_INSTANCE=1
    networks:
      - pad-network

  review-service-1:
    container_name: review-service-1
    build: 
      context: ./review_service
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./review_service:/app
    ports:
      - "8003:8000"
    depends_on:
      - review_db
      - api-gateway
      - service-discovery
    environment:
      - PORT=8003
      - DATABASE_URL=postgres://review_service_user:review_service_password@review_db:5432/review_service_db
      - API_GATEWAY_URL=http://api-gateway:8080/
      - DJANGO_SETTINGS_MODULE=review_service.settings
      - SERVICE_DISCOVERY_HOST=service-discovery:50051 # The gRPC host and port for the service discovery
      - SERVICE_TYPE=review
    networks:
      - pad-network

  review-service-2:
    container_name: review-service-2
    build: 
      context: ./review_service
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./review_service:/app
    ports:
      - "8004:8000"
    depends_on:
      - review_db
      - api-gateway
      - service-discovery
    environment:
      - PORT=8004
      - DATABASE_URL=postgres://review_service_user:review_service_password@review_db:5432/review_service_db
      - API_GATEWAY_URL=http://api-gateway:8080/
      - DJANGO_SETTINGS_MODULE=review_service.settings
      - SERVICE_DISCOVERY_HOST=service-discovery:50051 # The gRPC host and port for the service discovery
      - SERVICE_TYPE=review
    networks:
      - pad-network

  review-service-3:
    container_name: review-service-3
    build: 
      context: ./review_service
    entrypoint: ["./entrypoint.sh"]
    volumes:
      - ./review_service:/app
    ports:
      - "8005:8000"
    depends_on:
      - review_db
      - api-gateway
      - service-discovery
    environment:
      - PORT=8005
      - DATABASE_URL=postgres://review_service_user:review_service_password@review_db:5432/review_service_db
      - API_GATEWAY_URL=http://api-gateway:8080/
      - DJANGO_SETTINGS_MODULE=review_service.settings
      - SERVICE_DISCOVERY_HOST=service-discovery:50051 # The gRPC host and port for the service discovery
      - SERVICE_TYPE=review
    networks:
      - pad-network


  service_metadata:
    container_name: service_metadata
    image: redis:latest
    ports:
      - "6380:6379"
    command: redis-server --save "" --appendonly no
    networks:
      - pad-network
    
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api_gateway
    environment:
      - PORT=8080
      - SERV_REST_PORT=8000
      - SERV_TIMEOUT_MS=4000
      - MAX_CONCURRENT_REQUESTS=3
      - SERVICE_METADATA_URL=redis://service_metadata:6379
    ports:
      - "8080:8080"
    networks:
      - pad-network

  service-discovery:
    container_name: service-discovery
    depends_on:
      - service_metadata
    build:
      context: ./service_discovery
    environment:
      - SERVICE_METADATA_URL=redis://service_metadata:6379
      - PORT=50051
    ports:
      - "50051:50051"
    volumes:
      - service_discovery-data:/app/logs
    networks:
      - pad-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - pad-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: logstash
    ports:
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - pad-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - pad-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.3
    container_name: filebeat
    command: ["filebeat", "-e", "-strict.perms=false"]
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - service_discovery-data:/usr/share/filebeat/data
    depends_on:
      - logstash
    networks:
      - pad-network


  ud-redis-node-1:
    image: bitnami/redis-cluster:latest
    container_name: ud-redis-node-1
    environment:
      - REDIS_NODES=ud-redis-node-1,ud-redis-node-2,ud-redis-node-3,ud-redis-node-4,ud-redis-node-5,ud-redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6385:6379"
    networks:
      - pad-network
    tmpfs:
      - /bitnami/redis

  ud-redis-node-2:
    image: bitnami/redis-cluster:latest
    container_name: ud-redis-node-2
    environment:
      - REDIS_NODES=ud-redis-node-1,ud-redis-node-2,ud-redis-node-3,ud-redis-node-4,ud-redis-node-5,ud-redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6386:6379"
    networks:
      - pad-network
    tmpfs:
      - /bitnami/redis

  ud-redis-node-3:
    image: bitnami/redis-cluster:latest
    container_name: ud-redis-node-3
    environment:
      - REDIS_NODES=ud-redis-node-1,ud-redis-node-2,ud-redis-node-3,ud-redis-node-4,ud-redis-node-5,ud-redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6387:6379"
    networks:
      - pad-network
    tmpfs:
      - /bitnami/redis

  ud-redis-node-4:
    image: bitnami/redis-cluster:latest
    container_name: ud-redis-node-4
    environment:
      - REDIS_NODES=ud-redis-node-1,ud-redis-node-2,ud-redis-node-3,ud-redis-node-4,ud-redis-node-5,ud-redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6388:6379"
    networks:
      - pad-network
    tmpfs:
      - /bitnami/redis

  ud-redis-node-5:
    image: bitnami/redis-cluster:latest
    container_name: ud-redis-node-5
    environment:
      - REDIS_NODES=ud-redis-node-1,ud-redis-node-2,ud-redis-node-3,ud-redis-node-4,ud-redis-node-5,ud-redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6389:6379"
    networks:
      - pad-network
    tmpfs:
      - /bitnami/redis

  ud-redis-node-6:
    image: bitnami/redis-cluster:latest
    container_name: ud-redis-node-6
    environment:
      - REDIS_NODES=ud-redis-node-1,ud-redis-node-2,ud-redis-node-3,ud-redis-node-4,ud-redis-node-5,ud-redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6390:6379"
    networks:
      - pad-network
    tmpfs:
      - /bitnami/redis

  redis-cluster-init-node:
    container_name: redis-cluster-init-node
    build:
      context: ./redis_cluster
      dockerfile: Dockerfile
    depends_on:
      - ud-redis-node-1
      - ud-redis-node-2
      - ud-redis-node-3
      - ud-redis-node-4
      - ud-redis-node-5
      - ud-redis-node-6
    networks:
      - pad-network

volumes:
  postgres_data_server_user:
  postgres_data_server_review:
  elasticsearch-data:
  service_discovery-data:

networks:
  pad-network:
    driver: bridge